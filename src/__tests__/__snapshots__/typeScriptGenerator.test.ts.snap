// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`Typescript Generator should generate unknown custom scalar type as \`any\` 1`] = `
"import { GraphQLResolveInfo, GraphQLScalarType } from 'graphql';
/**
 * This file is auto-generated by graphql-schema-typescript
 * Please note that any changes in this file may be overwritten
 */
/*******************************
 *                             *
 *           TYPE DEFS         *
 *                             *
 *******************************/

export interface GQLRootQuery {
  Users: GQLUser[];
  User?: GQLUser;
  Products?: GQLIProduct[];
  Search?: GQLSearchResult;
}

export interface GQLUserFilter {
  username?: (string | null)[];
}

/**
 * A user of the system
 */
export interface GQLUser {
  firstName: string;
  lastName: string;
  
  /**
   * 
   * @deprecated Email will replace username. If you are still using username please change it
   */
  username: string;
  email: string;
  role: GQLUserRole;
  
  /**
   * Url to the image
   */
  profilePicture?: string;
  
  /**
   * Account must be activated before using
   */
  activated: boolean;
}

/**
 * Different role will have different access to our functionality
 * In the future, this will be changed by having User as interface
 * and implementing multiple User
 */
export enum GQLUserRole {
  
  /**
   * System Administrator
   */
  sysAdmin = 'sysAdmin',
  
  /**
   * Manager - Have access to manage functions
   */
  manager = 'manager',
  
  /**
   * General Staff
   */
  clerk = 'clerk',
  
  /**
   * 
   * @deprecated Use 'clerk' instead
   */
  employee = 'employee'
}

export interface GQLIProduct {
  id: string;
  name: string;
  
  /**
   * Customers who buy this will also buy these
   */
  relatedProducts: GQLIProduct[];
}

/** Use this to resolve interface type IProduct */
export type GQLPossibleIProductTypeNames = 'ProductA' | 'ProductB';

export type GQLSearchResult = GQLUser | GQLProductA | GQLProductB;

/** Use this to resolve union type SearchResult */
export type GQLPossibleSearchResultTypeNames = 'User' | 'ProductA' | 'ProductB';

/**
 * Try to cover List/Non-null List/Non-null list of non-null items
 */
export interface GQLProductA {
  id: string;
  name: string;
  
  /**
   * Customers who buy this will also buy these
   */
  relatedProducts: GQLIProduct[];
  ProductA1?: GQLProductScalar;
  ProductA2: GQLProductScalar;
  ProductA3?: (GQLProductScalar | null)[];
  ProductA4: (GQLProductScalar | null)[];
  ProductA5?: GQLProductScalar[];
  ProductA6: GQLProductScalar[];
}

/**
 * Test with all scalar field
 */
export interface GQLProductScalar {
  scalarString1?: string;
  scalarString2: string;
  scalarInt1?: number;
  scalarInt2: number;
  scalarFloat1?: number;
  scalarFloat2: number;
  scalarID1?: string;
  scalarID2: string;
  scalarBoolean1?: boolean;
  scalarBoolean2: boolean;
}

export interface GQLProductB {
  id: string;
  name: string;
  
  /**
   * Customers who buy this will also buy these
   */
  relatedProducts: GQLIProduct[];
  ProductB1?: GQLProductListScalar;
  ProductB2: GQLProductListScalar;
  ProductB3?: (GQLProductListScalar | null)[];
  ProductB4: (GQLProductListScalar | null)[];
  ProductB5?: GQLProductListScalar[];
  ProductB6: GQLProductListScalar[];
}

export interface GQLProductListScalar {
  listString1?: (string | null)[];
  listString2: (string | null)[];
  listString3?: string[];
  listString4: string[];
  listInt1?: (number | null)[];
  listInt2: (number | null)[];
  listInt3?: number[];
  listInt4: number[];
  listFloat1?: (number | null)[];
  listFloat2: (number | null)[];
  listFloat3?: number[];
  listFloat4: number[];
  listID1?: (string | null)[];
  listID2: (string | null)[];
  listID3?: string[];
  listID4: string[];
  listBoolean1?: (boolean | null)[];
  listBoolean2: (boolean | null)[];
  listBoolean3?: boolean[];
  listBoolean4: boolean[];
}

export interface GQLRootMutation {
  createUser?: GQLUser;
}

export interface GQLCreateUserInput {
  username: string;
  email: string;
  password: string;
  createdAt: GQLDate;
}

/**
 * Custom scalar type
 */
export type GQLDate = any;

/*********************************
 *                               *
 *         TYPE RESOLVERS        *
 *                               *
 *********************************/

/** This interface define the shape of your resolver  */
export interface GQLResolver {
  RootQuery?: GQLRootQueryTypeResolver;
  User?: GQLUserTypeResolver;
  IProduct: {
    __resolveType: GQLIProductTypeResolver
  };
  
  SearchResult: {
    __resolveType: GQLSearchResultTypeResolver
  };
  
  ProductA?: GQLProductATypeResolver;
  ProductScalar?: GQLProductScalarTypeResolver;
  ProductB?: GQLProductBTypeResolver;
  ProductListScalar?: GQLProductListScalarTypeResolver;
  RootMutation?: GQLRootMutationTypeResolver;
  GQLDate: GraphQLScalarType;
}
export interface RootQueryToUsersArgs {
  Users?: GQLUserFilter;
}
export interface RootQueryToUsersResolver<TParent = any, TResult = any> {
  (parent: TParent, args: RootQueryToUsersArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface RootQueryToUserResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface RootQueryToProductsResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface RootQueryToSearchArgs {
  Search?: string;
}
export interface RootQueryToSearchResolver<TParent = any, TResult = any> {
  (parent: TParent, args: RootQueryToSearchArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLRootQueryTypeResolver {
  Users?: RootQueryToUsersResolver;
  User?: RootQueryToUserResolver;
  Products?: RootQueryToProductsResolver;
  Search?: RootQueryToSearchResolver;
}

export interface UserTofirstNameResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface UserTolastNameResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface UserTousernameResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface UserToemailResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface UserToroleResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface UserToprofilePictureResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface UserToactivatedResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLUserTypeResolver {
  firstName?: UserTofirstNameResolver;
  lastName?: UserTolastNameResolver;
  username?: UserTousernameResolver;
  email?: UserToemailResolver;
  role?: UserToroleResolver;
  profilePicture?: UserToprofilePictureResolver;
  activated?: UserToactivatedResolver;
}

export interface GQLIProductTypeResolver {
  (value: any, context: any, info: GraphQLResolveInfo): 'ProductA' | 'ProductB';
}
export interface GQLSearchResultTypeResolver {
  (value: any, context: any, info: GraphQLResolveInfo): 'User' | 'ProductA' | 'ProductB';
}
export interface ProductAToidResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ProductATonameResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ProductATorelatedProductsResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ProductAToProductA1Resolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ProductAToProductA2Resolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ProductAToProductA3Resolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ProductAToProductA4Resolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ProductAToProductA5Resolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ProductAToProductA6Resolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLProductATypeResolver {
  id?: ProductAToidResolver;
  name?: ProductATonameResolver;
  relatedProducts?: ProductATorelatedProductsResolver;
  ProductA1?: ProductAToProductA1Resolver;
  ProductA2?: ProductAToProductA2Resolver;
  ProductA3?: ProductAToProductA3Resolver;
  ProductA4?: ProductAToProductA4Resolver;
  ProductA5?: ProductAToProductA5Resolver;
  ProductA6?: ProductAToProductA6Resolver;
}

export interface ProductScalarToscalarString1Resolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ProductScalarToscalarString2Resolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ProductScalarToscalarInt1Resolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ProductScalarToscalarInt2Resolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ProductScalarToscalarFloat1Resolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ProductScalarToscalarFloat2Resolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ProductScalarToscalarID1Resolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ProductScalarToscalarID2Resolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ProductScalarToscalarBoolean1Resolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ProductScalarToscalarBoolean2Resolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLProductScalarTypeResolver {
  scalarString1?: ProductScalarToscalarString1Resolver;
  scalarString2?: ProductScalarToscalarString2Resolver;
  scalarInt1?: ProductScalarToscalarInt1Resolver;
  scalarInt2?: ProductScalarToscalarInt2Resolver;
  scalarFloat1?: ProductScalarToscalarFloat1Resolver;
  scalarFloat2?: ProductScalarToscalarFloat2Resolver;
  scalarID1?: ProductScalarToscalarID1Resolver;
  scalarID2?: ProductScalarToscalarID2Resolver;
  scalarBoolean1?: ProductScalarToscalarBoolean1Resolver;
  scalarBoolean2?: ProductScalarToscalarBoolean2Resolver;
}

export interface ProductBToidResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ProductBTonameResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ProductBTorelatedProductsResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ProductBToProductB1Resolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ProductBToProductB2Resolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ProductBToProductB3Resolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ProductBToProductB4Resolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ProductBToProductB5Resolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ProductBToProductB6Resolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLProductBTypeResolver {
  id?: ProductBToidResolver;
  name?: ProductBTonameResolver;
  relatedProducts?: ProductBTorelatedProductsResolver;
  ProductB1?: ProductBToProductB1Resolver;
  ProductB2?: ProductBToProductB2Resolver;
  ProductB3?: ProductBToProductB3Resolver;
  ProductB4?: ProductBToProductB4Resolver;
  ProductB5?: ProductBToProductB5Resolver;
  ProductB6?: ProductBToProductB6Resolver;
}

export interface ProductListScalarTolistString1Resolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ProductListScalarTolistString2Resolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ProductListScalarTolistString3Resolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ProductListScalarTolistString4Resolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ProductListScalarTolistInt1Resolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ProductListScalarTolistInt2Resolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ProductListScalarTolistInt3Resolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ProductListScalarTolistInt4Resolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ProductListScalarTolistFloat1Resolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ProductListScalarTolistFloat2Resolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ProductListScalarTolistFloat3Resolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ProductListScalarTolistFloat4Resolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ProductListScalarTolistID1Resolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ProductListScalarTolistID2Resolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ProductListScalarTolistID3Resolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ProductListScalarTolistID4Resolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ProductListScalarTolistBoolean1Resolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ProductListScalarTolistBoolean2Resolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ProductListScalarTolistBoolean3Resolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ProductListScalarTolistBoolean4Resolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLProductListScalarTypeResolver {
  listString1?: ProductListScalarTolistString1Resolver;
  listString2?: ProductListScalarTolistString2Resolver;
  listString3?: ProductListScalarTolistString3Resolver;
  listString4?: ProductListScalarTolistString4Resolver;
  listInt1?: ProductListScalarTolistInt1Resolver;
  listInt2?: ProductListScalarTolistInt2Resolver;
  listInt3?: ProductListScalarTolistInt3Resolver;
  listInt4?: ProductListScalarTolistInt4Resolver;
  listFloat1?: ProductListScalarTolistFloat1Resolver;
  listFloat2?: ProductListScalarTolistFloat2Resolver;
  listFloat3?: ProductListScalarTolistFloat3Resolver;
  listFloat4?: ProductListScalarTolistFloat4Resolver;
  listID1?: ProductListScalarTolistID1Resolver;
  listID2?: ProductListScalarTolistID2Resolver;
  listID3?: ProductListScalarTolistID3Resolver;
  listID4?: ProductListScalarTolistID4Resolver;
  listBoolean1?: ProductListScalarTolistBoolean1Resolver;
  listBoolean2?: ProductListScalarTolistBoolean2Resolver;
  listBoolean3?: ProductListScalarTolistBoolean3Resolver;
  listBoolean4?: ProductListScalarTolistBoolean4Resolver;
}

export interface RootMutationTocreateUserArgs {
  createUser?: GQLCreateUserInput;
}
export interface RootMutationTocreateUserResolver<TParent = any, TResult = any> {
  (parent: TParent, args: RootMutationTocreateUserArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLRootMutationTypeResolver {
  createUser?: RootMutationTocreateUserResolver;
}
"
`;
