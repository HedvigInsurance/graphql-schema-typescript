// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`Typescript Generator should fallback to string union if String Enum is not supported 1`] = `
"/**
 * This file is auto-generated by graphql-schema-typescript@1.0.0
 * Please note that any changes in this file may be overwritten
 */

export interface GQLRootQuery {
  Users: GQLUser[];
  User?: GQLUser;
  Products?: GQLIProduct[];
  Search?: GQLSearchResult;
}

export interface GQLUserFilter {
  username?: (string | null)[];
}

/**
 * A user of the system
 */
export interface GQLUser {
  firstName: string;
  lastName: string;
  
  /**
   * 
   * @deprecated Email will replace username. If you are still using username please change it
   */
  username: string;
  
  email: string;
  role: GQLUserRole;
  
  /**
   * Url to the image
   */
  profilePicture?: string;
  
  
  /**
   * Account must be activated before using
   */
  activated: boolean;
  
}

/**
 * Different role will have different access to our functionality
 * In the future, this will be changed by having User as interface
 * and implementing multiple User
 */
export enum GQLUserRole {
  
  /**
   * System Administrator
   */
  sysAdmin = \\"sysAdmin\\",
  
  /**
   * Manager - Have access to manage functions
   */
  manager = \\"manager\\",
  
  /**
   * General Staff
   */
  clerk = \\"clerk\\",
  
  /**
   * 
   * @deprecated Use 'clerk' instead
   */
  employee = \\"employee\\"
}

export interface GQLIProduct {
  id: string;
  name: string;
  
  /**
   * Customers who buy this will also buy these
   */
  relatedProducts: GQLIProduct[];
  
}

export type GQLSearchResult = GQLUser | GQLProductA | GQLProductB;

/**
 * Try to cover List/Non-null List/Non-null list of non-null items
 */
export interface GQLProductA {
  id: string;
  name: string;
  
  /**
   * Customers who buy this will also buy these
   */
  relatedProducts: GQLIProduct[];
  
  ProductA1?: GQLProductScalar;
  ProductA2: GQLProductScalar;
  ProductA3?: (GQLProductScalar | null)[];
  ProductA4: (GQLProductScalar | null)[];
  ProductA5?: GQLProductScalar[];
  ProductA6: GQLProductScalar[];
}

/**
 * Test with all scalar field
 */
export interface GQLProductScalar {
  scalarString1?: string;
  scalarString2: string;
  scalarInt1?: number;
  scalarInt2: number;
  scalarFloat1?: number;
  scalarFloat2: number;
  scalarID1?: string;
  scalarID2: string;
  scalarBoolean1?: boolean;
  scalarBoolean2: boolean;
}

export interface GQLProductB {
  id: string;
  name: string;
  
  /**
   * Customers who buy this will also buy these
   */
  relatedProducts: GQLIProduct[];
  
  ProductB1?: GQLProductListSclar;
  ProductB2: GQLProductListSclar;
  ProductB3?: (GQLProductListSclar | null)[];
  ProductB4: (GQLProductListSclar | null)[];
  ProductB5?: GQLProductListSclar[];
  ProductB6: GQLProductListSclar[];
}

export interface GQLProductListSclar {
  listString1?: (string | null)[];
  listString2: (string | null)[];
  listString3?: string[];
  listString4: string[];
  listInt1?: (number | null)[];
  listInt2: (number | null)[];
  listInt3?: number[];
  listInt4: number[];
  listFloat1?: (number | null)[];
  listFloat2: (number | null)[];
  listFloat3?: number[];
  listFloat4: number[];
  listID1?: (string | null)[];
  listID2: (string | null)[];
  listID3?: string[];
  listID4: string[];
  listBoolean1?: (boolean | null)[];
  listBoolean2: (boolean | null)[];
  listBoolean3?: boolean[];
  listBoolean4: boolean[];
}

export interface GQLRootMutation {
  createUser?: GQLUser;
}

export interface GQLCreateUserInput {
  username: string;
  email: string;
  password: string;
  createdAt: GQLDate;
}

/**
 * Custom scalar type
 */
export type GQLDate = any;
"
`;

exports[`Typescript Generator should generate known scalar type to its corresponding type 1`] = `
"/**
 * This file is auto-generated by graphql-schema-typescript@1.0.0
 * Please note that any changes in this file may be overwritten
 */

export interface GQLRootQuery {
  Users: GQLUser[];
  User?: GQLUser;
  Products?: GQLIProduct[];
  Search?: GQLSearchResult;
}

export interface GQLUserFilter {
  username?: (string | null)[];
}

/**
 * A user of the system
 */
export interface GQLUser {
  firstName: string;
  lastName: string;
  
  /**
   * 
   * @deprecated Email will replace username. If you are still using username please change it
   */
  username: string;
  email: string;
  role: GQLUserRole;
  
  /**
   * Url to the image
   */
  profilePicture?: string;
  
  /**
   * Account must be activated before using
   */
  activated: boolean;
}

/**
 * Different role will have different access to our functionality
 * In the future, this will be changed by having User as interface
 * and implementing multiple User
 */
export enum GQLUserRole {
  
  /**
   * System Administrator
   */
  sysAdmin = 'sysAdmin',
  
  /**
   * Manager - Have access to manage functions
   */
  manager = 'manager',
  
  /**
   * General Staff
   */
  clerk = 'clerk',
  
  /**
   * 
   * @deprecated Use 'clerk' instead
   */
  employee = 'employee'
}

export interface GQLIProduct {
  id: string;
  name: string;
  
  /**
   * Customers who buy this will also buy these
   */
  relatedProducts: GQLIProduct[];
}

export type GQLSearchResult = GQLUser | GQLProductA | GQLProductB;

/**
 * Try to cover List/Non-null List/Non-null list of non-null items
 */
export interface GQLProductA {
  id: string;
  name: string;
  
  /**
   * Customers who buy this will also buy these
   */
  relatedProducts: GQLIProduct[];
  ProductA1?: GQLProductScalar;
  ProductA2: GQLProductScalar;
  ProductA3?: (GQLProductScalar | null)[];
  ProductA4: (GQLProductScalar | null)[];
  ProductA5?: GQLProductScalar[];
  ProductA6: GQLProductScalar[];
}

/**
 * Test with all scalar field
 */
export interface GQLProductScalar {
  scalarString1?: string;
  scalarString2: string;
  scalarInt1?: number;
  scalarInt2: number;
  scalarFloat1?: number;
  scalarFloat2: number;
  scalarID1?: string;
  scalarID2: string;
  scalarBoolean1?: boolean;
  scalarBoolean2: boolean;
}

export interface GQLProductB {
  id: string;
  name: string;
  
  /**
   * Customers who buy this will also buy these
   */
  relatedProducts: GQLIProduct[];
  ProductB1?: GQLProductListSclar;
  ProductB2: GQLProductListSclar;
  ProductB3?: (GQLProductListSclar | null)[];
  ProductB4: (GQLProductListSclar | null)[];
  ProductB5?: GQLProductListSclar[];
  ProductB6: GQLProductListSclar[];
}

export interface GQLProductListSclar {
  listString1?: (string | null)[];
  listString2: (string | null)[];
  listString3?: string[];
  listString4: string[];
  listInt1?: (number | null)[];
  listInt2: (number | null)[];
  listInt3?: number[];
  listInt4: number[];
  listFloat1?: (number | null)[];
  listFloat2: (number | null)[];
  listFloat3?: number[];
  listFloat4: number[];
  listID1?: (string | null)[];
  listID2: (string | null)[];
  listID3?: string[];
  listID4: string[];
  listBoolean1?: (boolean | null)[];
  listBoolean2: (boolean | null)[];
  listBoolean3?: boolean[];
  listBoolean4: boolean[];
}

export interface GQLRootMutation {
  createUser?: GQLUser;
}

export interface GQLCreateUserInput {
  username: string;
  email: string;
  password: string;
  createdAt: GQLDate;
}

/**
 * Custom scalar type
 */
export type GQLDate = Date;
"
`;

exports[`Typescript Generator should generate unknown custom scalar type as \`any\` 1`] = `
"/**
 * This file is auto-generated by graphql-schema-typescript@1.0.0
 * Please note that any changes in this file may be overwritten
 */

export interface GQLRootQuery {
  Users: GQLUser[];
  User?: GQLUser;
  Products?: GQLIProduct[];
  Search?: GQLSearchResult;
}

export interface GQLUserFilter {
  username?: (string | null)[];
}

/**
 * A user of the system
 */
export interface GQLUser {
  firstName: string;
  lastName: string;
  
  /**
   * 
   * @deprecated Email will replace username. If you are still using username please change it
   */
  username: string;
  email: string;
  role: GQLUserRole;
  
  /**
   * Url to the image
   */
  profilePicture?: string;
  
  /**
   * Account must be activated before using
   */
  activated: boolean;
}

/**
 * Different role will have different access to our functionality
 * In the future, this will be changed by having User as interface
 * and implementing multiple User
 */
export enum GQLUserRole {
  
  /**
   * System Administrator
   */
  sysAdmin = 'sysAdmin',
  
  /**
   * Manager - Have access to manage functions
   */
  manager = 'manager',
  
  /**
   * General Staff
   */
  clerk = 'clerk',
  
  /**
   * 
   * @deprecated Use 'clerk' instead
   */
  employee = 'employee'
}

export interface GQLIProduct {
  id: string;
  name: string;
  
  /**
   * Customers who buy this will also buy these
   */
  relatedProducts: GQLIProduct[];
}

export type GQLSearchResult = GQLUser | GQLProductA | GQLProductB;

/**
 * Try to cover List/Non-null List/Non-null list of non-null items
 */
export interface GQLProductA {
  id: string;
  name: string;
  
  /**
   * Customers who buy this will also buy these
   */
  relatedProducts: GQLIProduct[];
  ProductA1?: GQLProductScalar;
  ProductA2: GQLProductScalar;
  ProductA3?: (GQLProductScalar | null)[];
  ProductA4: (GQLProductScalar | null)[];
  ProductA5?: GQLProductScalar[];
  ProductA6: GQLProductScalar[];
}

/**
 * Test with all scalar field
 */
export interface GQLProductScalar {
  scalarString1?: string;
  scalarString2: string;
  scalarInt1?: number;
  scalarInt2: number;
  scalarFloat1?: number;
  scalarFloat2: number;
  scalarID1?: string;
  scalarID2: string;
  scalarBoolean1?: boolean;
  scalarBoolean2: boolean;
}

export interface GQLProductB {
  id: string;
  name: string;
  
  /**
   * Customers who buy this will also buy these
   */
  relatedProducts: GQLIProduct[];
  ProductB1?: GQLProductListSclar;
  ProductB2: GQLProductListSclar;
  ProductB3?: (GQLProductListSclar | null)[];
  ProductB4: (GQLProductListSclar | null)[];
  ProductB5?: GQLProductListSclar[];
  ProductB6: GQLProductListSclar[];
}

export interface GQLProductListSclar {
  listString1?: (string | null)[];
  listString2: (string | null)[];
  listString3?: string[];
  listString4: string[];
  listInt1?: (number | null)[];
  listInt2: (number | null)[];
  listInt3?: number[];
  listInt4: number[];
  listFloat1?: (number | null)[];
  listFloat2: (number | null)[];
  listFloat3?: number[];
  listFloat4: number[];
  listID1?: (string | null)[];
  listID2: (string | null)[];
  listID3?: string[];
  listID4: string[];
  listBoolean1?: (boolean | null)[];
  listBoolean2: (boolean | null)[];
  listBoolean3?: boolean[];
  listBoolean4: boolean[];
}

export interface GQLRootMutation {
  createUser?: GQLUser;
}

export interface GQLCreateUserInput {
  username: string;
  email: string;
  password: string;
  createdAt: GQLDate;
}

/**
 * Custom scalar type
 */
export type GQLDate = any;
"
`;

exports[`Typescript Generator should use correct prefix in config options 1`] = `
"/**
 * This file is auto-generated by graphql-schema-typescript@1.0.0
 * Please note that any changes in this file may be overwritten
 */

export interface MyCustomPrefixRootQuery {
  Users: MyCustomPrefixUser[];
  User?: MyCustomPrefixUser;
  Products?: MyCustomPrefixIProduct[];
  Search?: MyCustomPrefixSearchResult;
}

export interface MyCustomPrefixUserFilter {
  username?: (string | null)[];
}

/**
 * A user of the system
 */
export interface MyCustomPrefixUser {
  firstName: string;
  lastName: string;
  
  /**
   * 
   * @deprecated Email will replace username. If you are still using username please change it
   */
  username: string;
  email: string;
  role: MyCustomPrefixUserRole;
  
  /**
   * Url to the image
   */
  profilePicture?: string;
  
  /**
   * Account must be activated before using
   */
  activated: boolean;
}

/**
 * Different role will have different access to our functionality
 * In the future, this will be changed by having User as interface
 * and implementing multiple User
 */
export enum MyCustomPrefixUserRole {
  
  /**
   * System Administrator
   */
  sysAdmin = 'sysAdmin',
  
  /**
   * Manager - Have access to manage functions
   */
  manager = 'manager',
  
  /**
   * General Staff
   */
  clerk = 'clerk',
  
  /**
   * 
   * @deprecated Use 'clerk' instead
   */
  employee = 'employee'
}

export interface MyCustomPrefixIProduct {
  id: string;
  name: string;
  
  /**
   * Customers who buy this will also buy these
   */
  relatedProducts: MyCustomPrefixIProduct[];
}

export type MyCustomPrefixSearchResult =
  MyCustomPrefixUser |
  MyCustomPrefixProductA |
  MyCustomPrefixProductB;

/**
 * Try to cover List/Non-null List/Non-null list of non-null items
 */
export interface MyCustomPrefixProductA {
  id: string;
  name: string;
  
  /**
   * Customers who buy this will also buy these
   */
  relatedProducts: MyCustomPrefixIProduct[];
  ProductA1?: MyCustomPrefixProductScalar;
  ProductA2: MyCustomPrefixProductScalar;
  ProductA3?: (MyCustomPrefixProductScalar | null)[];
  ProductA4: (MyCustomPrefixProductScalar | null)[];
  ProductA5?: MyCustomPrefixProductScalar[];
  ProductA6: MyCustomPrefixProductScalar[];
}

/**
 * Test with all scalar field
 */
export interface MyCustomPrefixProductScalar {
  scalarString1?: string;
  scalarString2: string;
  scalarInt1?: number;
  scalarInt2: number;
  scalarFloat1?: number;
  scalarFloat2: number;
  scalarID1?: string;
  scalarID2: string;
  scalarBoolean1?: boolean;
  scalarBoolean2: boolean;
}

export interface MyCustomPrefixProductB {
  id: string;
  name: string;
  
  /**
   * Customers who buy this will also buy these
   */
  relatedProducts: MyCustomPrefixIProduct[];
  ProductB1?: MyCustomPrefixProductListSclar;
  ProductB2: MyCustomPrefixProductListSclar;
  ProductB3?: (MyCustomPrefixProductListSclar | null)[];
  ProductB4: (MyCustomPrefixProductListSclar | null)[];
  ProductB5?: MyCustomPrefixProductListSclar[];
  ProductB6: MyCustomPrefixProductListSclar[];
}

export interface MyCustomPrefixProductListSclar {
  listString1?: (string | null)[];
  listString2: (string | null)[];
  listString3?: string[];
  listString4: string[];
  listInt1?: (number | null)[];
  listInt2: (number | null)[];
  listInt3?: number[];
  listInt4: number[];
  listFloat1?: (number | null)[];
  listFloat2: (number | null)[];
  listFloat3?: number[];
  listFloat4: number[];
  listID1?: (string | null)[];
  listID2: (string | null)[];
  listID3?: string[];
  listID4: string[];
  listBoolean1?: (boolean | null)[];
  listBoolean2: (boolean | null)[];
  listBoolean3?: boolean[];
  listBoolean4: boolean[];
}

export interface MyCustomPrefixRootMutation {
  createUser?: MyCustomPrefixUser;
}

export interface MyCustomPrefixCreateUserInput {
  username: string;
  email: string;
  password: string;
  createdAt: MyCustomPrefixDate;
}

/**
 * Custom scalar type
 */
export type MyCustomPrefixDate = any;
"
`;

exports[`Typescript Generator should use correct tabspaces in config options 1`] = `
"/**
 * This file is auto-generated by graphql-schema-typescript@1.0.0
 * Please note that any changes in this file may be overwritten
 */

export interface GQLRootQuery {
    Users: GQLUser[];
    User?: GQLUser;
    Products?: GQLIProduct[];
    Search?: GQLSearchResult;
}

export interface GQLUserFilter {
    username?: (string | null)[];
}

/**
 * A user of the system
 */
export interface GQLUser {
    firstName: string;
    lastName: string;
    
    /**
     * 
     * @deprecated Email will replace username. If you are still using username please change it
     */
    username: string;
    email: string;
    role: GQLUserRole;
    
    /**
     * Url to the image
     */
    profilePicture?: string;
    
    /**
     * Account must be activated before using
     */
    activated: boolean;
}

/**
 * Different role will have different access to our functionality
 * In the future, this will be changed by having User as interface
 * and implementing multiple User
 */
export enum GQLUserRole {
    
    /**
     * System Administrator
     */
    sysAdmin = 'sysAdmin',
    
    /**
     * Manager - Have access to manage functions
     */
    manager = 'manager',
    
    /**
     * General Staff
     */
    clerk = 'clerk',
    
    /**
     * 
     * @deprecated Use 'clerk' instead
     */
    employee = 'employee'
}

export interface GQLIProduct {
    id: string;
    name: string;
    
    /**
     * Customers who buy this will also buy these
     */
    relatedProducts: GQLIProduct[];
}

export type GQLSearchResult = GQLUser | GQLProductA | GQLProductB;

/**
 * Try to cover List/Non-null List/Non-null list of non-null items
 */
export interface GQLProductA {
    id: string;
    name: string;
    
    /**
     * Customers who buy this will also buy these
     */
    relatedProducts: GQLIProduct[];
    ProductA1?: GQLProductScalar;
    ProductA2: GQLProductScalar;
    ProductA3?: (GQLProductScalar | null)[];
    ProductA4: (GQLProductScalar | null)[];
    ProductA5?: GQLProductScalar[];
    ProductA6: GQLProductScalar[];
}

/**
 * Test with all scalar field
 */
export interface GQLProductScalar {
    scalarString1?: string;
    scalarString2: string;
    scalarInt1?: number;
    scalarInt2: number;
    scalarFloat1?: number;
    scalarFloat2: number;
    scalarID1?: string;
    scalarID2: string;
    scalarBoolean1?: boolean;
    scalarBoolean2: boolean;
}

export interface GQLProductB {
    id: string;
    name: string;
    
    /**
     * Customers who buy this will also buy these
     */
    relatedProducts: GQLIProduct[];
    ProductB1?: GQLProductListSclar;
    ProductB2: GQLProductListSclar;
    ProductB3?: (GQLProductListSclar | null)[];
    ProductB4: (GQLProductListSclar | null)[];
    ProductB5?: GQLProductListSclar[];
    ProductB6: GQLProductListSclar[];
}

export interface GQLProductListSclar {
    listString1?: (string | null)[];
    listString2: (string | null)[];
    listString3?: string[];
    listString4: string[];
    listInt1?: (number | null)[];
    listInt2: (number | null)[];
    listInt3?: number[];
    listInt4: number[];
    listFloat1?: (number | null)[];
    listFloat2: (number | null)[];
    listFloat3?: number[];
    listFloat4: number[];
    listID1?: (string | null)[];
    listID2: (string | null)[];
    listID3?: string[];
    listID4: string[];
    listBoolean1?: (boolean | null)[];
    listBoolean2: (boolean | null)[];
    listBoolean3?: boolean[];
    listBoolean4: boolean[];
}

export interface GQLRootMutation {
    createUser?: GQLUser;
}

export interface GQLCreateUserInput {
    username: string;
    email: string;
    password: string;
    createdAt: GQLDate;
}

/**
 * Custom scalar type
 */
export type GQLDate = any;
"
`;
