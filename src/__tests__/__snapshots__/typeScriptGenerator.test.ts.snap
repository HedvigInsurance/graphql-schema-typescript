// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`Typescript Generator should generate unknown custom scalar type as \`any\` 1`] = `
"import { GraphQLResolveInfo, GraphQLScalarType } from 'graphql';
/**
 * This file is auto-generated by graphql-schema-typescript
 * Please note that any changes in this file may be overwritten
 */
/*******************************
 *                             *
 *           TYPE DEFS         *
 *                             *
 *******************************/

export interface GQLRootQuery {
  Users: GQLUser[];
  User?: GQLUser;
  Products?: GQLIProduct[];
  Search?: GQLSearchResult;
}

export interface GQLUserFilter {
  username?: (string | null)[];
}

/**
 * A user of the system
 */
export interface GQLUser {
  firstName: string;
  lastName: string;
  
  /**
   * 
   * @deprecated Email will replace username. If you are still using username please change it
   */
  username: string;
  email: string;
  role: GQLUserRole;
  
  /**
   * Url to the image
   */
  profilePicture?: string;
  
  /**
   * Account must be activated before using
   */
  activated: boolean;
}

/**
 * Different role will have different access to our functionality
 * In the future, this will be changed by having User as interface
 * and implementing multiple User
 */
export enum GQLUserRole {
  
  /**
   * System Administrator
   */
  sysAdmin = 'sysAdmin',
  
  /**
   * Manager - Have access to manage functions
   */
  manager = 'manager',
  
  /**
   * General Staff
   */
  clerk = 'clerk',
  
  /**
   * 
   * @deprecated Use 'clerk' instead
   */
  employee = 'employee'
}

export interface GQLIProduct {
  id: string;
  name: string;
  
  /**
   * Customers who buy this will also buy these
   */
  relatedProducts: GQLIProduct[];
}

/** Use this to resolve interface type IProduct */
export type GQLPossibleIProductTypeNames = 'ProductA' | 'ProductB';

export type GQLSearchResult = GQLUser | GQLProductA | GQLProductB;

/** Use this to resolve union type SearchResult */
export type GQLPossibleSearchResultTypeNames = 'User' | 'ProductA' | 'ProductB';

/**
 * Try to cover List/Non-null List/Non-null list of non-null items
 */
export interface GQLProductA {
  id: string;
  name: string;
  
  /**
   * Customers who buy this will also buy these
   */
  relatedProducts: GQLIProduct[];
  ProductA1?: GQLProductScalar;
  ProductA2: GQLProductScalar;
  ProductA3?: (GQLProductScalar | null)[];
  ProductA4: (GQLProductScalar | null)[];
  ProductA5?: GQLProductScalar[];
  ProductA6: GQLProductScalar[];
}

/**
 * Test with all scalar field
 */
export interface GQLProductScalar {
  scalarString1?: string;
  scalarString2: string;
  scalarInt1?: number;
  scalarInt2: number;
  scalarFloat1?: number;
  scalarFloat2: number;
  scalarID1?: string;
  scalarID2: string;
  scalarBoolean1?: boolean;
  scalarBoolean2: boolean;
}

export interface GQLProductB {
  id: string;
  name: string;
  
  /**
   * Customers who buy this will also buy these
   */
  relatedProducts: GQLIProduct[];
  ProductB1?: GQLProductListScalar;
  ProductB2: GQLProductListScalar;
  ProductB3?: (GQLProductListScalar | null)[];
  ProductB4: (GQLProductListScalar | null)[];
  ProductB5?: GQLProductListScalar[];
  ProductB6: GQLProductListScalar[];
}

export interface GQLProductListScalar {
  listString1?: (string | null)[];
  listString2: (string | null)[];
  listString3?: string[];
  listString4: string[];
  listInt1?: (number | null)[];
  listInt2: (number | null)[];
  listInt3?: number[];
  listInt4: number[];
  listFloat1?: (number | null)[];
  listFloat2: (number | null)[];
  listFloat3?: number[];
  listFloat4: number[];
  listID1?: (string | null)[];
  listID2: (string | null)[];
  listID3?: string[];
  listID4: string[];
  listBoolean1?: (boolean | null)[];
  listBoolean2: (boolean | null)[];
  listBoolean3?: boolean[];
  listBoolean4: boolean[];
}

export interface GQLRootMutation {
  createUser?: GQLUser;
}

export interface GQLCreateUserInput {
  username: string;
  email: string;
  password: string;
  createdAt: GQLDate;
}

/**
 * Custom scalar type
 */
export type GQLDate = any;

/*********************************
 *                               *
 *         TYPE RESOLVERS        *
 *                               *
 *********************************/

/**
 * This interface define the shape of your resolver
 * Note that this type is designed to be compatible with graphql-tools resolvers
 * However, you can still use other generated interfaces to make your resolver type-safed
 */
export interface GQLResolver {
  RootQuery?: GQLRootQueryTypeResolver;
  User?: GQLUserTypeResolver;
  IProduct?: {
    __resolveType: GQLIProductTypeResolver
  };
  
  SearchResult?: {
    __resolveType: GQLSearchResultTypeResolver
  };
  
  ProductA?: GQLProductATypeResolver;
  ProductScalar?: GQLProductScalarTypeResolver;
  ProductB?: GQLProductBTypeResolver;
  ProductListScalar?: GQLProductListScalarTypeResolver;
  RootMutation?: GQLRootMutationTypeResolver;
  GQLDate: GraphQLScalarType;
}
export interface GQLRootQueryTypeResolver {
  Users?: RootQueryToUsersResolver;
  User?: RootQueryToUserResolver;
  Products?: RootQueryToProductsResolver;
  Search?: RootQueryToSearchResolver;
}

export interface RootQueryToUsersArgs {
  Users?: GQLUserFilter;
}
export interface RootQueryToUsersResolver<TParent = any, TResult = any> {
  (parent: TParent, args: RootQueryToUsersArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface RootQueryToUserResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface RootQueryToProductsResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface RootQueryToSearchArgs {
  Search?: string;
}
export interface RootQueryToSearchResolver<TParent = any, TResult = any> {
  (parent: TParent, args: RootQueryToSearchArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLUserTypeResolver {
  firstName?: UserToFirstNameResolver;
  lastName?: UserToLastNameResolver;
  username?: UserToUsernameResolver;
  email?: UserToEmailResolver;
  role?: UserToRoleResolver;
  profilePicture?: UserToProfilePictureResolver;
  activated?: UserToActivatedResolver;
}

export interface UserToFirstNameResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface UserToLastNameResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface UserToUsernameResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface UserToEmailResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface UserToRoleResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface UserToProfilePictureResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface UserToActivatedResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLIProductTypeResolver<TParent = any> {
  (parent: TParent, context: any, info: GraphQLResolveInfo): 'ProductA' | 'ProductB';
}
export interface GQLSearchResultTypeResolver<TParent = any> {
  (parent: TParent, context: any, info: GraphQLResolveInfo): 'User' | 'ProductA' | 'ProductB';
}
export interface GQLProductATypeResolver {
  id?: ProductAToIdResolver;
  name?: ProductAToNameResolver;
  relatedProducts?: ProductAToRelatedProductsResolver;
  ProductA1?: ProductAToProductA1Resolver;
  ProductA2?: ProductAToProductA2Resolver;
  ProductA3?: ProductAToProductA3Resolver;
  ProductA4?: ProductAToProductA4Resolver;
  ProductA5?: ProductAToProductA5Resolver;
  ProductA6?: ProductAToProductA6Resolver;
}

export interface ProductAToIdResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ProductAToNameResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ProductAToRelatedProductsResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ProductAToProductA1Resolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ProductAToProductA2Resolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ProductAToProductA3Resolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ProductAToProductA4Resolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ProductAToProductA5Resolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ProductAToProductA6Resolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLProductScalarTypeResolver {
  scalarString1?: ProductScalarToScalarString1Resolver;
  scalarString2?: ProductScalarToScalarString2Resolver;
  scalarInt1?: ProductScalarToScalarInt1Resolver;
  scalarInt2?: ProductScalarToScalarInt2Resolver;
  scalarFloat1?: ProductScalarToScalarFloat1Resolver;
  scalarFloat2?: ProductScalarToScalarFloat2Resolver;
  scalarID1?: ProductScalarToScalarID1Resolver;
  scalarID2?: ProductScalarToScalarID2Resolver;
  scalarBoolean1?: ProductScalarToScalarBoolean1Resolver;
  scalarBoolean2?: ProductScalarToScalarBoolean2Resolver;
}

export interface ProductScalarToScalarString1Resolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ProductScalarToScalarString2Resolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ProductScalarToScalarInt1Resolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ProductScalarToScalarInt2Resolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ProductScalarToScalarFloat1Resolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ProductScalarToScalarFloat2Resolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ProductScalarToScalarID1Resolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ProductScalarToScalarID2Resolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ProductScalarToScalarBoolean1Resolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ProductScalarToScalarBoolean2Resolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLProductBTypeResolver {
  id?: ProductBToIdResolver;
  name?: ProductBToNameResolver;
  relatedProducts?: ProductBToRelatedProductsResolver;
  ProductB1?: ProductBToProductB1Resolver;
  ProductB2?: ProductBToProductB2Resolver;
  ProductB3?: ProductBToProductB3Resolver;
  ProductB4?: ProductBToProductB4Resolver;
  ProductB5?: ProductBToProductB5Resolver;
  ProductB6?: ProductBToProductB6Resolver;
}

export interface ProductBToIdResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ProductBToNameResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ProductBToRelatedProductsResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ProductBToProductB1Resolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ProductBToProductB2Resolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ProductBToProductB3Resolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ProductBToProductB4Resolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ProductBToProductB5Resolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ProductBToProductB6Resolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLProductListScalarTypeResolver {
  listString1?: ProductListScalarToListString1Resolver;
  listString2?: ProductListScalarToListString2Resolver;
  listString3?: ProductListScalarToListString3Resolver;
  listString4?: ProductListScalarToListString4Resolver;
  listInt1?: ProductListScalarToListInt1Resolver;
  listInt2?: ProductListScalarToListInt2Resolver;
  listInt3?: ProductListScalarToListInt3Resolver;
  listInt4?: ProductListScalarToListInt4Resolver;
  listFloat1?: ProductListScalarToListFloat1Resolver;
  listFloat2?: ProductListScalarToListFloat2Resolver;
  listFloat3?: ProductListScalarToListFloat3Resolver;
  listFloat4?: ProductListScalarToListFloat4Resolver;
  listID1?: ProductListScalarToListID1Resolver;
  listID2?: ProductListScalarToListID2Resolver;
  listID3?: ProductListScalarToListID3Resolver;
  listID4?: ProductListScalarToListID4Resolver;
  listBoolean1?: ProductListScalarToListBoolean1Resolver;
  listBoolean2?: ProductListScalarToListBoolean2Resolver;
  listBoolean3?: ProductListScalarToListBoolean3Resolver;
  listBoolean4?: ProductListScalarToListBoolean4Resolver;
}

export interface ProductListScalarToListString1Resolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ProductListScalarToListString2Resolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ProductListScalarToListString3Resolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ProductListScalarToListString4Resolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ProductListScalarToListInt1Resolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ProductListScalarToListInt2Resolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ProductListScalarToListInt3Resolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ProductListScalarToListInt4Resolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ProductListScalarToListFloat1Resolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ProductListScalarToListFloat2Resolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ProductListScalarToListFloat3Resolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ProductListScalarToListFloat4Resolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ProductListScalarToListID1Resolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ProductListScalarToListID2Resolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ProductListScalarToListID3Resolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ProductListScalarToListID4Resolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ProductListScalarToListBoolean1Resolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ProductListScalarToListBoolean2Resolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ProductListScalarToListBoolean3Resolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ProductListScalarToListBoolean4Resolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLRootMutationTypeResolver {
  createUser?: RootMutationToCreateUserResolver;
}

export interface RootMutationToCreateUserArgs {
  createUser?: GQLCreateUserInput;
}
export interface RootMutationToCreateUserResolver<TParent = any, TResult = any> {
  (parent: TParent, args: RootMutationToCreateUserArgs, context: any, info: GraphQLResolveInfo): TResult;
}
"
`;
