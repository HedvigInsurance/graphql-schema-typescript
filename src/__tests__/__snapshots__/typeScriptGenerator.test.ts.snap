// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`Typescript Generator should generate known scalar type to its corresponding type 1`] = `
"/**
 * This file is auto-generated by graphql-schema-typescript@0.0.1
 * Please note that any changes in this file may be overwritten
 */

export interface GQL_RootQuery {
  Users: GQL_User[];
  User?: GQL_User;
  Products?: GQL_IProduct[];
  Search?: GQL_SearchResult;
}

export interface GQL_UserFilter {
  username?: (string | null)[];
}

/**
 * A user of the system
 */
export interface GQL_User {
  firstName: string;
  lastName: string;
  
  /**
   * 
   * @deprecated Email will replace username. If you are still using username please change it
   */
  username: string;
  
  email: string;
  role: GQL_UserRole;
  
  /**
   * Url to the image
   */
  profilePicture?: string;
  
  
  /**
   * Account must be activated before using
   */
  activated: boolean;
  
}

/**
 * Different role will have different access to our functionality
 * In the future, this will be changed by having User as interface
 * and implementing multiple User
 */
export type GQL_UserRole = 'sysAdmin' | 'manager' | 'clerk' | 'employee';

export interface GQL_IProduct {
  id: string;
  name: string;
  
  /**
   * Customers who buy this will also buy these
   */
  relatedProducts: GQL_IProduct[];
  
}

export type GQL_SearchResult = GQL_User | GQL_ProductA | GQL_ProductB;

/**
 * Try to cover List/Non-null List/Non-null list of non-null items
 */
export interface GQL_ProductA {
  id: string;
  name: string;
  
  /**
   * Customers who buy this will also buy these
   */
  relatedProducts: GQL_IProduct[];
  
  ProductA1?: GQL_ProductScalar;
  ProductA2: GQL_ProductScalar;
  ProductA3?: (GQL_ProductScalar | null)[];
  ProductA4: (GQL_ProductScalar | null)[];
  ProductA5?: GQL_ProductScalar[];
  ProductA6: GQL_ProductScalar[];
}

/**
 * Test with all scalar field
 */
export interface GQL_ProductScalar {
  scalarString1?: string;
  scalarString2: string;
  scalarInt1?: number;
  scalarInt2: number;
  scalarFloat1?: number;
  scalarFloat2: number;
  scalarID1?: string;
  scalarID2: string;
  scalarBoolean1?: boolean;
  scalarBoolean2: boolean;
}

export interface GQL_ProductB {
  id: string;
  name: string;
  
  /**
   * Customers who buy this will also buy these
   */
  relatedProducts: GQL_IProduct[];
  
  ProductB1?: GQL_ProductListSclar;
  ProductB2: GQL_ProductListSclar;
  ProductB3?: (GQL_ProductListSclar | null)[];
  ProductB4: (GQL_ProductListSclar | null)[];
  ProductB5?: GQL_ProductListSclar[];
  ProductB6: GQL_ProductListSclar[];
}

export interface GQL_ProductListSclar {
  listString1?: (string | null)[];
  listString2: (string | null)[];
  listString3?: string[];
  listString4: string[];
  listInt1?: (number | null)[];
  listInt2: (number | null)[];
  listInt3?: number[];
  listInt4: number[];
  listFloat1?: (number | null)[];
  listFloat2: (number | null)[];
  listFloat3?: number[];
  listFloat4: number[];
  listID1?: (string | null)[];
  listID2: (string | null)[];
  listID3?: string[];
  listID4: string[];
  listBoolean1?: (boolean | null)[];
  listBoolean2: (boolean | null)[];
  listBoolean3?: boolean[];
  listBoolean4: boolean[];
}

export interface GQL_RootMutation {
  createUser?: GQL_User;
}

export interface GQL_CreateUserInput {
  username: string;
  email: string;
  password: string;
  createdAt: Date;
}

/**
 * Custom scalar type
 */
export type GQL_Date = Date;
"
`;

exports[`Typescript Generator should generate unknown custom scalar type as \`any\` 1`] = `
"/**
 * This file is auto-generated by graphql-schema-typescript@0.0.1
 * Please note that any changes in this file may be overwritten
 */

export interface GQL_RootQuery {
  Users: GQL_User[];
  User?: GQL_User;
  Products?: GQL_IProduct[];
  Search?: GQL_SearchResult;
}

export interface GQL_UserFilter {
  username?: (string | null)[];
}

/**
 * A user of the system
 */
export interface GQL_User {
  firstName: string;
  lastName: string;
  
  /**
   * 
   * @deprecated Email will replace username. If you are still using username please change it
   */
  username: string;
  
  email: string;
  role: GQL_UserRole;
  
  /**
   * Url to the image
   */
  profilePicture?: string;
  
  
  /**
   * Account must be activated before using
   */
  activated: boolean;
  
}

/**
 * Different role will have different access to our functionality
 * In the future, this will be changed by having User as interface
 * and implementing multiple User
 */
export type GQL_UserRole = 'sysAdmin' | 'manager' | 'clerk' | 'employee';

export interface GQL_IProduct {
  id: string;
  name: string;
  
  /**
   * Customers who buy this will also buy these
   */
  relatedProducts: GQL_IProduct[];
  
}

export type GQL_SearchResult = GQL_User | GQL_ProductA | GQL_ProductB;

/**
 * Try to cover List/Non-null List/Non-null list of non-null items
 */
export interface GQL_ProductA {
  id: string;
  name: string;
  
  /**
   * Customers who buy this will also buy these
   */
  relatedProducts: GQL_IProduct[];
  
  ProductA1?: GQL_ProductScalar;
  ProductA2: GQL_ProductScalar;
  ProductA3?: (GQL_ProductScalar | null)[];
  ProductA4: (GQL_ProductScalar | null)[];
  ProductA5?: GQL_ProductScalar[];
  ProductA6: GQL_ProductScalar[];
}

/**
 * Test with all scalar field
 */
export interface GQL_ProductScalar {
  scalarString1?: string;
  scalarString2: string;
  scalarInt1?: number;
  scalarInt2: number;
  scalarFloat1?: number;
  scalarFloat2: number;
  scalarID1?: string;
  scalarID2: string;
  scalarBoolean1?: boolean;
  scalarBoolean2: boolean;
}

export interface GQL_ProductB {
  id: string;
  name: string;
  
  /**
   * Customers who buy this will also buy these
   */
  relatedProducts: GQL_IProduct[];
  
  ProductB1?: GQL_ProductListSclar;
  ProductB2: GQL_ProductListSclar;
  ProductB3?: (GQL_ProductListSclar | null)[];
  ProductB4: (GQL_ProductListSclar | null)[];
  ProductB5?: GQL_ProductListSclar[];
  ProductB6: GQL_ProductListSclar[];
}

export interface GQL_ProductListSclar {
  listString1?: (string | null)[];
  listString2: (string | null)[];
  listString3?: string[];
  listString4: string[];
  listInt1?: (number | null)[];
  listInt2: (number | null)[];
  listInt3?: number[];
  listInt4: number[];
  listFloat1?: (number | null)[];
  listFloat2: (number | null)[];
  listFloat3?: number[];
  listFloat4: number[];
  listID1?: (string | null)[];
  listID2: (string | null)[];
  listID3?: string[];
  listID4: string[];
  listBoolean1?: (boolean | null)[];
  listBoolean2: (boolean | null)[];
  listBoolean3?: boolean[];
  listBoolean4: boolean[];
}

export interface GQL_RootMutation {
  createUser?: GQL_User;
}

export interface GQL_CreateUserInput {
  username: string;
  email: string;
  password: string;
  createdAt: Date;
}

/**
 * Custom scalar type
 */
export type GQL_Date = any;
"
`;

exports[`Typescript Generator should use correct prefix in config options 1`] = `
"/**
 * This file is auto-generated by graphql-schema-typescript@0.0.1
 * Please note that any changes in this file may be overwritten
 */

export interface MyCustomPrefixRootQuery {
  Users: MyCustomPrefixUser[];
  User?: MyCustomPrefixUser;
  Products?: MyCustomPrefixIProduct[];
  Search?: MyCustomPrefixSearchResult;
}

export interface MyCustomPrefixUserFilter {
  username?: (string | null)[];
}

/**
 * A user of the system
 */
export interface MyCustomPrefixUser {
  firstName: string;
  lastName: string;
  
  /**
   * 
   * @deprecated Email will replace username. If you are still using username please change it
   */
  username: string;
  
  email: string;
  role: MyCustomPrefixUserRole;
  
  /**
   * Url to the image
   */
  profilePicture?: string;
  
  
  /**
   * Account must be activated before using
   */
  activated: boolean;
  
}

/**
 * Different role will have different access to our functionality
 * In the future, this will be changed by having User as interface
 * and implementing multiple User
 */
export type MyCustomPrefixUserRole =
  'sysAdmin' |
  'manager' |
  'clerk' |
  'employee';

export interface MyCustomPrefixIProduct {
  id: string;
  name: string;
  
  /**
   * Customers who buy this will also buy these
   */
  relatedProducts: MyCustomPrefixIProduct[];
  
}

export type MyCustomPrefixSearchResult =
  MyCustomPrefixUser |
  MyCustomPrefixProductA |
  MyCustomPrefixProductB;

/**
 * Try to cover List/Non-null List/Non-null list of non-null items
 */
export interface MyCustomPrefixProductA {
  id: string;
  name: string;
  
  /**
   * Customers who buy this will also buy these
   */
  relatedProducts: MyCustomPrefixIProduct[];
  
  ProductA1?: MyCustomPrefixProductScalar;
  ProductA2: MyCustomPrefixProductScalar;
  ProductA3?: (MyCustomPrefixProductScalar | null)[];
  ProductA4: (MyCustomPrefixProductScalar | null)[];
  ProductA5?: MyCustomPrefixProductScalar[];
  ProductA6: MyCustomPrefixProductScalar[];
}

/**
 * Test with all scalar field
 */
export interface MyCustomPrefixProductScalar {
  scalarString1?: string;
  scalarString2: string;
  scalarInt1?: number;
  scalarInt2: number;
  scalarFloat1?: number;
  scalarFloat2: number;
  scalarID1?: string;
  scalarID2: string;
  scalarBoolean1?: boolean;
  scalarBoolean2: boolean;
}

export interface MyCustomPrefixProductB {
  id: string;
  name: string;
  
  /**
   * Customers who buy this will also buy these
   */
  relatedProducts: MyCustomPrefixIProduct[];
  
  ProductB1?: MyCustomPrefixProductListSclar;
  ProductB2: MyCustomPrefixProductListSclar;
  ProductB3?: (MyCustomPrefixProductListSclar | null)[];
  ProductB4: (MyCustomPrefixProductListSclar | null)[];
  ProductB5?: MyCustomPrefixProductListSclar[];
  ProductB6: MyCustomPrefixProductListSclar[];
}

export interface MyCustomPrefixProductListSclar {
  listString1?: (string | null)[];
  listString2: (string | null)[];
  listString3?: string[];
  listString4: string[];
  listInt1?: (number | null)[];
  listInt2: (number | null)[];
  listInt3?: number[];
  listInt4: number[];
  listFloat1?: (number | null)[];
  listFloat2: (number | null)[];
  listFloat3?: number[];
  listFloat4: number[];
  listID1?: (string | null)[];
  listID2: (string | null)[];
  listID3?: string[];
  listID4: string[];
  listBoolean1?: (boolean | null)[];
  listBoolean2: (boolean | null)[];
  listBoolean3?: boolean[];
  listBoolean4: boolean[];
}

export interface MyCustomPrefixRootMutation {
  createUser?: MyCustomPrefixUser;
}

export interface MyCustomPrefixCreateUserInput {
  username: string;
  email: string;
  password: string;
  createdAt: Date;
}

/**
 * Custom scalar type
 */
export type MyCustomPrefixDate = any;
"
`;

exports[`Typescript Generator should use correct tabspaces in config options 1`] = `
"/**
 * This file is auto-generated by graphql-schema-typescript@0.0.1
 * Please note that any changes in this file may be overwritten
 */

export interface GQL_RootQuery {
    Users: GQL_User[];
    User?: GQL_User;
    Products?: GQL_IProduct[];
    Search?: GQL_SearchResult;
}

export interface GQL_UserFilter {
    username?: (string | null)[];
}

/**
 * A user of the system
 */
export interface GQL_User {
    firstName: string;
    lastName: string;
    
    /**
     * 
     * @deprecated Email will replace username. If you are still using username please change it
     */
    username: string;
    
    email: string;
    role: GQL_UserRole;
    
    /**
     * Url to the image
     */
    profilePicture?: string;
    
    
    /**
     * Account must be activated before using
     */
    activated: boolean;
    
}

/**
 * Different role will have different access to our functionality
 * In the future, this will be changed by having User as interface
 * and implementing multiple User
 */
export type GQL_UserRole = 'sysAdmin' | 'manager' | 'clerk' | 'employee';

export interface GQL_IProduct {
    id: string;
    name: string;
    
    /**
     * Customers who buy this will also buy these
     */
    relatedProducts: GQL_IProduct[];
    
}

export type GQL_SearchResult = GQL_User | GQL_ProductA | GQL_ProductB;

/**
 * Try to cover List/Non-null List/Non-null list of non-null items
 */
export interface GQL_ProductA {
    id: string;
    name: string;
    
    /**
     * Customers who buy this will also buy these
     */
    relatedProducts: GQL_IProduct[];
    
    ProductA1?: GQL_ProductScalar;
    ProductA2: GQL_ProductScalar;
    ProductA3?: (GQL_ProductScalar | null)[];
    ProductA4: (GQL_ProductScalar | null)[];
    ProductA5?: GQL_ProductScalar[];
    ProductA6: GQL_ProductScalar[];
}

/**
 * Test with all scalar field
 */
export interface GQL_ProductScalar {
    scalarString1?: string;
    scalarString2: string;
    scalarInt1?: number;
    scalarInt2: number;
    scalarFloat1?: number;
    scalarFloat2: number;
    scalarID1?: string;
    scalarID2: string;
    scalarBoolean1?: boolean;
    scalarBoolean2: boolean;
}

export interface GQL_ProductB {
    id: string;
    name: string;
    
    /**
     * Customers who buy this will also buy these
     */
    relatedProducts: GQL_IProduct[];
    
    ProductB1?: GQL_ProductListSclar;
    ProductB2: GQL_ProductListSclar;
    ProductB3?: (GQL_ProductListSclar | null)[];
    ProductB4: (GQL_ProductListSclar | null)[];
    ProductB5?: GQL_ProductListSclar[];
    ProductB6: GQL_ProductListSclar[];
}

export interface GQL_ProductListSclar {
    listString1?: (string | null)[];
    listString2: (string | null)[];
    listString3?: string[];
    listString4: string[];
    listInt1?: (number | null)[];
    listInt2: (number | null)[];
    listInt3?: number[];
    listInt4: number[];
    listFloat1?: (number | null)[];
    listFloat2: (number | null)[];
    listFloat3?: number[];
    listFloat4: number[];
    listID1?: (string | null)[];
    listID2: (string | null)[];
    listID3?: string[];
    listID4: string[];
    listBoolean1?: (boolean | null)[];
    listBoolean2: (boolean | null)[];
    listBoolean3?: boolean[];
    listBoolean4: boolean[];
}

export interface GQL_RootMutation {
    createUser?: GQL_User;
}

export interface GQL_CreateUserInput {
    username: string;
    email: string;
    password: string;
    createdAt: Date;
}

/**
 * Custom scalar type
 */
export type GQL_Date = any;
"
`;
