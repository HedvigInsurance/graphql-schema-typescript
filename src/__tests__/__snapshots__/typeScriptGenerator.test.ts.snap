// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`Typescript Generator should generate unknown custom scalar type as \`any\` 1`] = `
"
/**
 * This file is auto-generated by graphql-schema-typescript
 * Please note that any changes in this file may be overwritten
 */

export interface GQLRootQuery {
  Users: GQLUser[];
  User?: GQLUser;
  Products?: GQLIProduct[];
  Search?: GQLSearchResult;
}

export interface GQLUserFilter {
  username?: (string | null)[];
}

/**
 * A user of the system
 */
export interface GQLUser {
  firstName: string;
  lastName: string;
  
  /**
   * 
   * @deprecated Email will replace username. If you are still using username please change it
   */
  username: string;
  email: string;
  role: GQLUserRole;
  
  /**
   * Url to the image
   */
  profilePicture?: string;
  
  /**
   * Account must be activated before using
   */
  activated: boolean;
}

/**
 * Different role will have different access to our functionality
 * In the future, this will be changed by having User as interface
 * and implementing multiple User
 */
export enum GQLUserRole {
  
  /**
   * System Administrator
   */
  sysAdmin = 'sysAdmin',
  
  /**
   * Manager - Have access to manage functions
   */
  manager = 'manager',
  
  /**
   * General Staff
   */
  clerk = 'clerk',
  
  /**
   * 
   * @deprecated Use 'clerk' instead
   */
  employee = 'employee'
}

export interface GQLIProduct {
  id: string;
  name: string;
  
  /**
   * Customers who buy this will also buy these
   */
  relatedProducts: GQLIProduct[];
}

/** Use this to resolve interface type IProduct */
export type GQLPossibleIProductTypeNames = 'ProductA' | 'ProductB';

export type GQLSearchResult = GQLUser | GQLProductA | GQLProductB;

/** Use this to resolve union type SearchResult */
export type GQLPossibleSearchResultTypeNames = 'User' | 'ProductA' | 'ProductB';

/**
 * Try to cover List/Non-null List/Non-null list of non-null items
 */
export interface GQLProductA {
  id: string;
  name: string;
  
  /**
   * Customers who buy this will also buy these
   */
  relatedProducts: GQLIProduct[];
  ProductA1?: GQLProductScalar;
  ProductA2: GQLProductScalar;
  ProductA3?: (GQLProductScalar | null)[];
  ProductA4: (GQLProductScalar | null)[];
  ProductA5?: GQLProductScalar[];
  ProductA6: GQLProductScalar[];
}

/**
 * Test with all scalar field
 */
export interface GQLProductScalar {
  scalarString1?: string;
  scalarString2: string;
  scalarInt1?: number;
  scalarInt2: number;
  scalarFloat1?: number;
  scalarFloat2: number;
  scalarID1?: string;
  scalarID2: string;
  scalarBoolean1?: boolean;
  scalarBoolean2: boolean;
}

export interface GQLProductB {
  id: string;
  name: string;
  
  /**
   * Customers who buy this will also buy these
   */
  relatedProducts: GQLIProduct[];
  ProductB1?: GQLProductListScalar;
  ProductB2: GQLProductListScalar;
  ProductB3?: (GQLProductListScalar | null)[];
  ProductB4: (GQLProductListScalar | null)[];
  ProductB5?: GQLProductListScalar[];
  ProductB6: GQLProductListScalar[];
}

export interface GQLProductListScalar {
  listString1?: (string | null)[];
  listString2: (string | null)[];
  listString3?: string[];
  listString4: string[];
  listInt1?: (number | null)[];
  listInt2: (number | null)[];
  listInt3?: number[];
  listInt4: number[];
  listFloat1?: (number | null)[];
  listFloat2: (number | null)[];
  listFloat3?: number[];
  listFloat4: number[];
  listID1?: (string | null)[];
  listID2: (string | null)[];
  listID3?: string[];
  listID4: string[];
  listBoolean1?: (boolean | null)[];
  listBoolean2: (boolean | null)[];
  listBoolean3?: boolean[];
  listBoolean4: boolean[];
}

export interface GQLRootMutation {
  createUser?: GQLUser;
}

export interface GQLCreateUserInput {
  username: string;
  email: string;
  password: string;
  createdAt: GQLDate;
}

/**
 * Custom scalar type
 */
export type GQLDate = any;
"
`;
